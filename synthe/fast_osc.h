#pragma once

// fast_osc.h
// 軽量なオシレータ - テーブルを持たずに数式で波形を生成します。
// 目的: 大きな波形テーブル（例: 2048エントリ）を削減してフラッシュ使用量を下げる

#include <stdint.h>
#include <math.h>

// Quarter-wave sine table for 0..pi/2 (256 entries)
static const float SIN_QUARTER[256] = {
0.0000000000e+00,
6.1599466381e-03,
1.2319659535e-02,
1.8478904959e-02,
2.4637449195e-02,
3.0795058556e-02,
3.6951499389e-02,
4.3106538086e-02,
4.9259941093e-02,
5.5411474916e-02,
6.1560906134e-02,
6.7708001405e-02,
7.3852527475e-02,
7.9994251189e-02,
8.6132939496e-02,
9.2268359463e-02,
9.8400278280e-02,
1.0452846327e-01,
1.1065268189e-01,
1.1677270177e-01,
1.2288829066e-01,
1.2899921653e-01,
1.3510524748e-01,
1.4120615182e-01,
1.4730169805e-01,
1.5339165488e-01,
1.5947579121e-01,
1.6555387618e-01,
1.7162567917e-01,
1.7769096976e-01,
1.8374951782e-01,
1.8980109344e-01,
1.9584546701e-01,
2.0188240916e-01,
2.0791169082e-01,
2.1393308321e-01,
2.1994635784e-01,
2.2595128654e-01,
2.3194764145e-01,
2.3793519504e-01,
2.4391372011e-01,
2.4988298979e-01,
2.5584277759e-01,
2.6179285736e-01,
2.6773300332e-01,
2.7366299007e-01,
2.7958259260e-01,
2.8549158628e-01,
2.9138974689e-01,
2.9727685063e-01,
3.0315267411e-01,
3.0901699437e-01,
3.1486958889e-01,
3.2071023559e-01,
3.2653871284e-01,
3.3235479948e-01,
3.3815827482e-01,
3.4394891863e-01,
3.4972651121e-01,
3.5549083330e-01,
3.6124166619e-01,
3.6697879165e-01,
3.7270199199e-01,
3.7841105004e-01,
3.8410574917e-01,
3.8978587329e-01,
3.9545120687e-01,
4.0110153493e-01,
4.0673664308e-01,
4.1235631747e-01,
4.1796034489e-01,
4.2354851267e-01,
4.2912060877e-01,
4.3467642177e-01,
4.4021574083e-01,
4.4573835578e-01,
4.5124405705e-01,
4.5673263572e-01,
4.6220388354e-01,
4.6765759289e-01,
4.7309355684e-01,
4.7851156910e-01,
4.8391142410e-01,
4.8929291693e-01,
4.9465584340e-01,
5.0000000000e-01,
5.0532518395e-01,
5.1063119318e-01,
5.1591782636e-01,
5.2118488288e-01,
5.2643216288e-01,
5.3165946725e-01,
5.3686659764e-01,
5.4205335647e-01,
5.4721954692e-01,
5.5236497296e-01,
5.5748943934e-01,
5.6259275162e-01,
5.6767471614e-01,
5.7273514008e-01,
5.7777383141e-01,
5.8279059893e-01,
5.8778525229e-01,
5.9275760196e-01,
5.9770745927e-01,
6.0263463638e-01,
6.0753894634e-01,
6.1242020305e-01,
6.1727822129e-01,
6.2211281672e-01,
6.2692380589e-01,
6.3171100625e-01,
6.3647423615e-01,
6.4121331483e-01,
6.4592806249e-01,
6.5061830020e-01,
6.5528385001e-01,
6.5992453488e-01,
6.6454017871e-01,
6.6913060636e-01,
6.7369564365e-01,
6.7823511735e-01,
6.8274885522e-01,
6.8723668597e-01,
6.9169843932e-01,
6.9613394596e-01,
7.0054303759e-01,
7.0492554691e-01,
7.0928130761e-01,
7.1361015441e-01,
7.1791192306e-01,
7.2218645033e-01,
7.2643357402e-01,
7.3065313296e-01,
7.3484496705e-01,
7.3900891722e-01,
7.4314482548e-01,
7.4725253488e-01,
7.5133188956e-01,
7.5538273472e-01,
7.5940491665e-01,
7.6339828274e-01,
7.6736268145e-01,
7.7129796235e-01,
7.7520397611e-01,
7.7908057453e-01,
7.8292761049e-01,
7.8674493803e-01,
7.9053241230e-01,
7.9428988958e-01,
7.9801722728e-01,
8.0171428398e-01,
8.0538091939e-01,
8.0901699437e-01,
8.1262237097e-01,
8.1619691236e-01,
8.1974048291e-01,
8.2325294816e-01,
8.2673417483e-01,
8.3018403082e-01,
8.3360238522e-01,
8.3698910833e-01,
8.4034407164e-01,
8.4366714783e-01,
8.4695821082e-01,
8.5021713573e-01,
8.5344379889e-01,
8.5663807786e-01,
8.5979985145e-01,
8.6292899967e-01,
8.6602540378e-01,
8.6908894631e-01,
8.7211951098e-01,
8.7511698282e-01,
8.7808124808e-01,
8.8101219429e-01,
8.8390971021e-01,
8.8677368592e-01,
8.8960401273e-01,
8.9240058325e-01,
8.9516329136e-01,
8.9789203222e-01,
9.0058670230e-01,
9.0324719935e-01,
9.0587342240e-01,
9.0846527182e-01,
9.1102264925e-01,
9.1354545764e-01,
9.1603360128e-01,
9.1848698575e-01,
9.2090551794e-01,
9.2328910611e-01,
9.2563765978e-01,
9.2795108986e-01,
9.3022930855e-01,
9.3247222940e-01,
9.3467976732e-01,
9.3685183853e-01,
9.3898836062e-01,
9.4108925250e-01,
9.4315443447e-01,
9.4518382816e-01,
9.4717735656e-01,
9.4913494404e-01,
9.5105651630e-01,
9.5294200043e-01,
9.5479132489e-01,
9.5660441950e-01,
9.5838121547e-01,
9.6012164537e-01,
9.6182564317e-01,
9.6349314421e-01,
9.6512408520e-01,
9.6671840427e-01,
9.6827604092e-01,
9.6979693604e-01,
9.7128103192e-01,
9.7272827224e-01,
9.7413860210e-01,
9.7551196798e-01,
9.7684831776e-01,
9.7814760073e-01,
9.7940976760e-01,
9.8063477047e-01,
9.8182256285e-01,
9.8297309968e-01,
9.8408633730e-01,
9.8516223347e-01,
9.8620074735e-01,
9.8720183955e-01,
9.8816547208e-01,
9.8909160837e-01,
9.8998021328e-01,
9.9083125309e-01,
9.9164469551e-01,
9.9242050967e-01,
9.9315866614e-01,
9.9385913690e-01,
9.9452189537e-01,
9.9514691641e-01,
9.9573417630e-01,
9.9628365275e-01,
9.9679532492e-01,
9.9726917339e-01,
9.9770518017e-01,
9.9810332874e-01,
9.9846360397e-01,
9.9878599219e-01,
9.9907048118e-01,
9.9931706014e-01,
9.9952571971e-01,
9.9969645198e-01,
9.9982925046e-01,
9.9992411011e-01,
9.9998102735e-01,
1.0000000000e+00
};

template<int RATE>
class FastPhasor {
public:
  FastPhasor(): phase(0), inc(0) {}
  void setFreq(float freq) {
    // phase increment per sample (0..1)
    inc = freq / RATE;
  }
  void setPhase(float p) { phase = p - floor(p); }
  float next() {
    phase += inc;
    if (phase >= 1.0f) phase -= 1.0f;
    return phase;
  }
private:
  float phase;
  float inc;
};

// sin: use quarter-wave approximation using a small table or direct sinf
// Here we implement simple fast sinf approximation using math sinf for clarity
// and correctness. If symmetries are used, we can compute sin(2*pi*phase) directly.

template<int RATE>
class FastOsc {
public:
  enum Wave {SINE, TRIANGLE, SAW, SQUARE};
  FastOsc(Wave w = SINE): wave(w), phase(0.0f), inc(0.0f) {}
  void setWave(Wave w) { wave = w; }
  void setFreq(float freq) { inc = freq / RATE; }
  void setPhase(float p) { phase = p - floor(p); }
  // return float in range [-1,1]
  float next() {
    phase += inc;
    if (phase >= 1.0f) phase -= 1.0f;
    switch (wave) {
      case SINE:
        return fast_sin(phase);
      case TRIANGLE:
        return fast_triangle(phase);
      case SAW:
        return fast_saw(phase);
      case SQUARE:
        return (phase < 0.5f) ? 1.0f : -1.0f;
    }
    return 0.0f;
  }
private:
  Wave wave;
  float phase;
  float inc;

  static float fast_sin(float p) {
    // p in [0,1) -> compute sin(2*pi*p) using quarter-wave table (0..pi/2)
    // Table has N entries for 0..pi/2. Use quadrant symmetry to cover 0..2pi.
    const int N = 256;
    // convert phase to t in [0,4)
    float t = p * 4.0f;
    int q = (int)floorf(t); // quadrant 0..3
    float r = t - (float)q; // fractional position inside quadrant

    // helper: linear interpolate in quarter table for position r
    auto tbl_val = [&](float frac)->float {
      // index in [0, N-1]
      float idxf = frac * (N - 1);
      int idx = (int)floorf(idxf);
      if (idx >= N - 1) return SIN_QUARTER[N - 1];
      float a = SIN_QUARTER[idx];
      float b = SIN_QUARTER[idx + 1];
      float t2 = idxf - (float)idx;
      return a + (b - a) * t2;
    };

    float v;
    switch (q & 3) {
      case 0: v = tbl_val(r); break;                 // 0..pi/2
      case 1: v = tbl_val(1.0f - r); break;         // pi/2..pi
      case 2: v = -tbl_val(r); break;               // pi..3pi/2
      default: v = -tbl_val(1.0f - r); break;       // 3pi/2..2pi
    }
    return v;
  }
  static float fast_triangle(float p) {
    // triangle wave in [-1,1]
    if (p < 0.25f) return 4.0f * p;
    if (p < 0.75f) return 2.0f - 4.0f * p;
    return -4.0f + 4.0f * p;
  }
  static float fast_saw(float p) {
    return 2.0f * p - 1.0f; // linear ramp -1..1
  }
};
